// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let allTimeData = {};
let allDailyData = {};
let currentPeriod = 'today';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ popup
document.addEventListener('DOMContentLoaded', async () => {
  await loadData();
  setupEventListeners();
  displayStats();
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ background script
async function loadData() {
  return new Promise((resolve) => {
    chrome.runtime.sendMessage({ action: 'getTimeData' }, (response) => {
      allTimeData = response.timeData || {};
      allDailyData = response.dailyData || {};
      resolve();
    });
  });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function setupEventListeners() {
  // –§—ñ–ª—å—Ç—Ä–∏ –ø–µ—Ä—ñ–æ–¥—ñ–≤
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', (e) => {
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      e.target.classList.add('active');
      currentPeriod = e.target.dataset.period;
      displayStats();
    });
  });

  // –ö–Ω–æ–ø–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
  document.getElementById('resetBtn').addEventListener('click', async () => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
      await resetData();
    }
  });

  // –ö–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É
  document.getElementById('exportBtn').addEventListener('click', () => {
    exportData();
  });
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
function formatTime(seconds) {
  if (seconds < 60) {
    return `${seconds} —Å–µ–∫`;
  } else if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    return `${minutes} —Ö–≤`;
  } else {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    if (minutes === 0) {
      return `${hours} –≥–æ–¥`;
    }
    return `${hours} –≥–æ–¥ ${minutes} —Ö–≤`;
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É
function getDateForPeriod(period) {
  const now = new Date();
  const dates = [];

  if (period === 'today') {
    dates.push(now.toISOString().split('T')[0]);
  } else if (period === 'week') {
    for (let i = 0; i < 7; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      dates.push(date.toISOString().split('T')[0]);
    }
  }

  return dates;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
function getDataForPeriod() {
  if (currentPeriod === 'all') {
    return allTimeData;
  }

  const dates = getDateForPeriod(currentPeriod);
  const periodData = {};

  dates.forEach(date => {
    const dayData = allDailyData[date] || {};
    Object.keys(dayData).forEach(domain => {
      if (!periodData[domain]) {
        periodData[domain] = {
          totalTime: 0,
          favicon: allTimeData[domain]?.favicon || `https://www.google.com/s2/favicons?domain=${domain}&sz=64`,
          lastVisit: allTimeData[domain]?.lastVisit || Date.now()
        };
      }
      periodData[domain].totalTime += dayData[domain];
    });
  });

  return periodData;
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats() {
  const data = getDataForPeriod();
  const sitesList = document.getElementById('sitesList');

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
  let totalTime = 0;
  Object.values(data).forEach(site => {
    totalTime += site.totalTime;
  });

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—É–º–∞—Ä–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateSummaryStats();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –¥–∞–Ω—ñ
  if (Object.keys(data).length === 0) {
    sitesList.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìä</div>
        <div class="empty-state-text">
          –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.<br>
          –ü–æ—á–Ω—ñ—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–∏, —ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç.
        </div>
      </div>
    `;
    return;
  }

  // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
  const sortedSites = Object.entries(data)
    .sort((a, b) => b[1].totalTime - a[1].totalTime)
    .slice(0, 20); // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-20

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∞–π—Ç—É
  const sitesHTML = sortedSites.map(([domain, info]) => {
    const percentage = totalTime > 0 ? (info.totalTime / totalTime * 100).toFixed(1) : 0;
    return `
      <div class="site-item">
        <img src="${info.favicon}" class="site-favicon" onerror="this.src='data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 24 24%22><text y=%2218%22 font-size=%2218%22>üåê</text></svg>'">
        <div class="site-info">
          <div class="site-domain">${domain}</div>
          <div class="site-bar-container">
            <div class="site-bar" style="width: ${percentage}%"></div>
          </div>
          <div class="site-percentage">${percentage}%</div>
        </div>
        <div class="site-time">${formatTime(info.totalTime)}</div>
      </div>
    `;
  }).join('');

  sitesList.innerHTML = sitesHTML;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—É–º–∞—Ä–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateSummaryStats() {
  const todayDate = new Date().toISOString().split('T')[0];
  const weekDates = getDateForPeriod('week');

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
  let todayTotal = 0;
  const todayData = allDailyData[todayDate] || {};
  Object.values(todayData).forEach(time => {
    todayTotal += time;
  });

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
  let weekTotal = 0;
  weekDates.forEach(date => {
    const dayData = allDailyData[date] || {};
    Object.values(dayData).forEach(time => {
      weekTotal += time;
    });
  });

  document.getElementById('todayTotal').textContent = formatTime(todayTotal);
  document.getElementById('weekTotal').textContent = formatTime(weekTotal);
}

// –°–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
async function resetData() {
  return new Promise((resolve) => {
    chrome.runtime.sendMessage({ action: 'resetData' }, async (response) => {
      if (response.success) {
        await loadData();
        displayStats();
        resolve();
      }
    });
  });
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ JSON
function exportData() {
  const exportObj = {
    timeData: allTimeData,
    dailyData: allDailyData,
    exportDate: new Date().toISOString(),
    summary: generateSummary()
  };

  const dataStr = JSON.stringify(exportObj, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });

  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `screen-time-export-${new Date().toISOString().split('T')[0]}.json`;
  link.click();

  URL.revokeObjectURL(url);
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
function generateSummary() {
  const todayDate = new Date().toISOString().split('T')[0];
  const weekDates = getDateForPeriod('week');

  let todayTotal = 0;
  const todayData = allDailyData[todayDate] || {};
  Object.values(todayData).forEach(time => {
    todayTotal += time;
  });

  let weekTotal = 0;
  weekDates.forEach(date => {
    const dayData = allDailyData[date] || {};
    Object.values(dayData).forEach(time => {
      weekTotal += time;
    });
  });

  let allTimeTotal = 0;
  Object.values(allTimeData).forEach(site => {
    allTimeTotal += site.totalTime;
  });

  return {
    todayTotal: formatTime(todayTotal),
    weekTotal: formatTime(weekTotal),
    allTimeTotal: formatTime(allTimeTotal),
    totalSites: Object.keys(allTimeData).length
  };
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
  await loadData();
  displayStats();
}, 5000);
